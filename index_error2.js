require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º GymProgress...');

// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: {
    interval: 300,
    autoStart: true,
    params: {
      timeout: 10
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
  console.log('Polling error:', error.code);
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  setTimeout(() => {
    bot.startPolling();
  }, 5000);
});

bot.on('webhook_error', (error) => {
  console.log('Webhook error:', error);
});

console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const userData = new Map();
const activeTimers = new Map(); // userId -> timerData

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –≤–µ—Å–∞–º–∏ (–≤ % –æ—Ç –≤–µ—Å–∞ —Ç–µ–ª–∞)
const exerciseWeights = {
  '–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞': { beginner: 0.45, intermediate: 0.68, advanced: 0.92 },
  '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π': { beginner: 0.55, intermediate: 0.82, advanced: 1.15 },
  '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞': { beginner: 0.65, intermediate: 0.95, advanced: 1.35 },
  '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è': { beginner: 0.18, intermediate: 0.27, advanced: 0.36 },
  '–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ': { beginner: 0.35, intermediate: 0.52, advanced: 0.72 },
  '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è': { beginner: 0.0, intermediate: 0.0, advanced: 0.0 },
  '–û—Ç–∂–∏–º–∞–Ω–∏—è': { beginner: 0.0, intermediate: 0.0, advanced: 0.0 },
  '–í—ã–ø–∞–¥—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏': { beginner: 0.12, intermediate: 0.22, advanced: 0.32 },
  '–ñ–∏–º –Ω–æ–≥–∞–º–∏': { beginner: 0.8, intermediate: 1.2, advanced: 1.6 },
  '–°–≥–∏–±–∞–Ω–∏—è —Ä—É–∫ —Å–æ —à—Ç–∞–Ω–≥–æ–π': { beginner: 0.15, intermediate: 0.25, advanced: 0.35 }
};

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–µ—Å–∞
function recommendWeight(exerciseName, userWeight, experienceLevel) {
  const exercise = exerciseWeights[exerciseName];
  if (!exercise) {
    // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–∞–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    const generalPercentages = { beginner: 0.2, intermediate: 0.3, advanced: 0.4 };
    return userWeight * generalPercentages[experienceLevel];
  }
  
  const percentage = exercise[experienceLevel];
  return userWeight * percentage;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
function parseTime(timeStr) {
  if (!timeStr) return null;
  
  // –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å–µ–∫—É–Ω–¥—ã
  if (/^\d+$/.test(timeStr)) {
    return parseInt(timeStr);
  }
  
  // –§–æ—Ä–º–∞—Ç –º–º:—Å—Å
  if (/^\d+:\d+$/.test(timeStr)) {
    const parts = timeStr.split(':');
    return parseInt(parts[0]) * 60 + parseInt(parts[1]);
  }
  
  // –§–æ—Ä–º–∞—Ç —Å –º –∏ —Å
  if (timeStr.includes('–º') || timeStr.includes('—Å')) {
    let seconds = 0;
    const minutesMatch = timeStr.match(/(\d+)\s*–º/);
    const secondsMatch = timeStr.match(/(\d+)\s*—Å/);
    
    if (minutesMatch) seconds += parseInt(minutesMatch[1]) * 60;
    if (secondsMatch) seconds += parseInt(secondsMatch[1]);
    
    return seconds > 0 ? seconds : null;
  }
  
  return null;
}

function formatTime(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  
  if (mins > 0) {
    return `${mins}–º ${secs}—Å`;
  }
  return `${secs}—Å`;
}

function startSingleTimer(userId, chatId, timerData) {
  if (activeTimers.has(userId)) {
    clearTimeout(activeTimers.get(userId).timeout);
  }
  
  const timer = setTimeout(() => {
    activeTimers.delete(userId);
    
    let message = `‚è∞ <b>–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n`;
    message += `üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${timerData.name}\n`;
    message += `‚è∞ –í—Ä–µ–º—è: ${formatTime(timerData.duration)}\n\n`;
    message += `üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = userData.get(userId);
    if (user) {
      user.state = 'menu';
    }
    
  }, timerData.duration * 1000);
  
  activeTimers.set(userId, {
    timeout: timer,
    type: 'single',
    data: timerData
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
  let startMessage = `üöÄ <b>–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!</b>\n\n`;
  startMessage += `üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${timerData.name}\n`;
  startMessage += `‚è∞ –í—Ä–µ–º—è: ${formatTime(timerData.duration)}\n\n`;
  startMessage += `–Ø —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç! üí™`;
  
  return bot.sendMessage(chatId, startMessage, { 
    parse_mode: 'HTML',
    reply_markup: {
      keyboard: [
        ['‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'],
        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!userData.has(userId)) {
    userData.set(userId, {
      workouts: [],
      state: 'questionnaire',
      profile: {}
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–†–ê–ó–ê)
    bot.sendMessage(chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GymProgress! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n` +
      `–ß—Ç–æ–±—ã —è –º–æ–≥ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É.\n\n` +
      `üéØ <b>–ö–∞–∫–æ–≤–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?</b>`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            ['üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'üî• –°—É—à–∫–∞/–ø–æ—Ö—É–¥–µ–Ω–∏–µ'],
            ['üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã']
          ],
          resize_keyboard: true
        }
      }
    );
    
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
  userData.get(userId).state = 'menu';
  
  const options = {
    reply_markup: {
      keyboard: [
        ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
        ['‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, `üí™ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${msg.from.first_name}!`, options);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–∞–π–º–µ—Ä–∞
bot.onText(/‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  userData.get(userId).state = 'timer_menu';
  
  bot.sendMessage(chatId,
    '‚è± <b>–¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</b>\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–π–º–µ—Ä–∞:',
    {
      parse_mode: 'HTML',
      reply_markup: {
        keyboard: [
          ['‚è∞ –û–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä'],
          ['üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä'], 
          ['üìä –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã'],
          ['‚ùå –û—Ç–º–µ–Ω–∞']
        ],
        resize_keyboard: true
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
bot.onText(/‚è∞ –û–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  userData.get(userId).state = 'timer_set_name';
  userData.get(userId).timerData = { type: 'single' };
  
  bot.sendMessage(chatId,
    'üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n\n' +
    '–ü—Ä–∏–º–µ—Ä: "–ü–ª–∞–Ω–∫–∞", "–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ", "–ü—Ä—ã–∂–∫–∏"',
    {
      parse_mode: 'HTML',
      reply_markup: {
        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
        resize_keyboard: true
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
bot.onText(/‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (activeTimers.has(userId)) {
    const timer = activeTimers.get(userId);
    clearTimeout(timer.timeout);
    activeTimers.delete(userId);
    
    bot.sendMessage(chatId, 
      '‚èπ <b>–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n' +
      '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!',
      { 
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            ['‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'],
            ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
          ],
          resize_keyboard: true
        }
      }
    );
    
    const user = userData.get(userId);
    if (user) {
      user.state = 'menu';
    }
  } else {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤');
  }
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.onText(/üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  userData.get(userId).state = 'menu';
  
  bot.sendMessage(chatId, 'üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', {
    parse_mode: 'HTML',
    reply_markup: {
      keyboard: [
        ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
        ['‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
      ],
      resize_keyboard: true
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text.trim();
  
  if (text.startsWith('/')) return;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
  const menuButtons = [
    'üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', '‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 'üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
    'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π', '‚ùå –û—Ç–º–µ–Ω–∞', '‚è∞ –û–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä',
    'üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä', 'üìä –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã', '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä',
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'üî• –°—É—à–∫–∞/–ø–æ—Ö—É–¥–µ–Ω–∏–µ', 'üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
    '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã', 'üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π', 'ü•ä –ù–æ–≤–∏—á–æ–∫ (–¥–æ 3 –º–µ—Å.)',
    'üí• –°—Ä–µ–¥–Ω–∏–π (3-12 –º–µ—Å.)', 'üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (1+ –ª–µ—Ç)'
  ];
  
  if (menuButtons.includes(text)) return;
  
  const user = userData.get(userId);
  if (!user) return;

  // –ê–Ω–∫–µ—Ç–∞ - —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  if (user.state === 'questionnaire' && !user.profile.goal) {
    if (['üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'üî• –°—É—à–∫–∞/–ø–æ—Ö—É–¥–µ–Ω–∏–µ', 'üèÉ –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'].includes(text)) {
      user.profile.goal = text;
      user.state = 'questionnaire_gender';
      
      bot.sendMessage(chatId,
        'üöª <b>–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:</b>',
        {
          parse_mode: 'HTML',
          reply_markup: {
            keyboard: [['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π']],
            resize_keyboard: true
          }
        }
      );
      return;
    }
  }
  
  // –ê–Ω–∫–µ—Ç–∞ - –ø–æ–ª
  if (user.state === 'questionnaire_gender') {
    if (['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π'].includes(text)) {
      user.profile.gender = text === 'üë® –ú—É–∂—Å–∫–æ–π' ? 'male' : 'female';
      user.state = 'questionnaire_age';
      
      bot.sendMessage(chatId,
        'üéÇ <b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ:',
        {
          parse_mode: 'HTML',
          reply_markup: { remove_keyboard: true }
        }
      );
      return;
    }
  }
  
  // –ê–Ω–∫–µ—Ç–∞ - –≤–æ–∑—Ä–∞—Å—Ç
  if (user.state === 'questionnaire_age' && !user.profile.age) {
    const age = parseInt(text);
    if (age && age >= 10 && age <= 100) {
      user.profile.age = age;
      user.state = 'questionnaire_weight';
      
      bot.sendMessage(chatId,
        '‚öñÔ∏è <b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å? (–≤ –∫–≥)</b>\n\n–ü—Ä–∏–º–µ—Ä: 75',
        { parse_mode: 'HTML' }
      );
      return;
    } else {
      bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100)');
      return;
    }
  }
  
  // –ê–Ω–∫–µ—Ç–∞ - –≤–µ—Å
  if (user.state === 'questionnaire_weight' && !user.profile.weight) {
    const weight = parseFloat(text);
    if (weight && weight >= 30 && weight <= 200) {
      user.profile.weight = weight;
      user.state = 'questionnaire_experience';
      
      bot.sendMessage(chatId,
        'üèÜ <b>–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?</b>',
        {
          parse_mode: 'HTML',
          reply_markup: {
            keyboard: [
              ['ü•ä –ù–æ–≤–∏—á–æ–∫ (–¥–æ 3 –º–µ—Å.)'],
              ['üí• –°—Ä–µ–¥–Ω–∏–π (3-12 –º–µ—Å.)'],
              ['üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (1+ –ª–µ—Ç)']
            ],
            resize_keyboard: true
          }
        }
      );
      return;
    } else {
      bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-200 –∫–≥)');
      return;
    }
  }
  
  // –ê–Ω–∫–µ—Ç–∞ - –æ–ø—ã—Ç
  if (user.state === 'questionnaire_experience') {
    if (text.includes('–ù–æ–≤–∏—á–æ–∫')) user.profile.experience = 'beginner';
    else if (text.includes('–°—Ä–µ–¥–Ω–∏–π')) user.profile.experience = 'intermediate';
    else if (text.includes('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π')) user.profile.experience = 'advanced';
    
    if (user.profile.experience) {
      user.state = 'menu';
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–µ—Å–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
      const recommendedWeights = {};
      Object.keys(exerciseWeights).forEach(exercise => {
        recommendedWeights[exercise] = recommendWeight(
          exercise, 
          user.profile.weight, 
          user.profile.experience
        );
      });
      user.profile.recommendedWeights = recommendedWeights;
      
      bot.sendMessage(chatId,
        `üéâ <b>–ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
        `üìä –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n` +
        `‚Ä¢ –¶–µ–ª—å: ${user.profile.goal}\n` +
        `‚Ä¢ –ü–æ–ª: ${user.profile.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}\n` +
        `‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: ${user.profile.age}\n` +
        `‚Ä¢ –í–µ—Å: ${user.profile.weight} –∫–≥\n` +
        `‚Ä¢ –û–ø—ã—Ç: ${text}\n\n` +
        `–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Å–∞–º! üí™`,
        {
          parse_mode: 'HTML',
          reply_markup: {
            keyboard: [
              ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
              ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
              ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
              ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
              ['‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
            ],
            resize_keyboard: true
          }
        }
      );
      return;
    }
  }

  // –¢–∞–π–º–µ—Ä - –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  if (user.state === 'timer_set_name' && user.timerData) {
    user.timerData.name = text;
    user.state = 'timer_set_duration';
    
    bot.sendMessage(chatId,
      '‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n\n' +
      '–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n' +
      '‚Ä¢ <code>30</code> - 30 —Å–µ–∫—É–Ω–¥\n' +
      '‚Ä¢ <code>2:30</code> - 2 –º–∏–Ω—É—Ç—ã 30 —Å–µ–∫—É–Ω–¥\n' +
      '‚Ä¢ <code>1–º 30—Å</code> - 1 –º–∏–Ω—É—Ç–∞ 30 —Å–µ–∫—É–Ω–¥\n\n' +
      '–ü—Ä–∏–º–µ—Ä: <code>1:30</code>',
      {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
    return;
  }

  // –¢–∞–π–º–µ—Ä - –≤–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (user.state === 'timer_set_duration' && user.timerData) {
    const duration = parseTime(text);
    if (!duration) {
      return bot.sendMessage(chatId, 
        '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30, 1:30, 2–º 15—Å'
      );
    }
    
    user.timerData.duration = duration;
    user.state = 'timer_confirm';
    
    const timeStr = formatTime(duration);
    
    bot.sendMessage(chatId,
      `‚úÖ <b>–¢–∞–π–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω:</b>\n\n` +
      `üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${user.timerData.name}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${timeStr}\n\n` +
      `–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä?`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          keyboard: [
            ['üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä'],
            ['‚ùå –û—Ç–º–µ–Ω–∞']
          ],
          resize_keyboard: true
        }
      }
    );
    return;
  }

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
  if (user.state === 'timer_confirm' && user.timerData) {
    if (text === 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä') {
      startSingleTimer(userId, chatId, user.timerData);
      delete user.timerData;
      user.state = 'menu';
      return;
    }
  }

  // –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  if (text === '‚ùå –û—Ç–º–µ–Ω–∞') {
    user.state = 'menu';
    delete user.timerData;
    
    bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
      reply_markup: {
        keyboard: [
          ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
          ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
          ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
          ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
          ['‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
        ],
        resize_keyboard: true
      }
    });
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (user.state === 'creating_name' && user.newWorkout) {
    user.newWorkout.name = text;
    user.state = 'creating_exercises';
    user.newWorkout.currentExercise = { step: 'name' };
    
    bot.sendMessage(chatId,
      'üí™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞"',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
  if (user.state === 'creating_exercises' && user.newWorkout && user.newWorkout.currentExercise) {
    const currentExercise = user.newWorkout.currentExercise;
    
    if (currentExercise.step === 'name') {
      currentExercise.name = text;
      currentExercise.step = 'weight';
      
      // –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –≤–µ—Å—É
      let recommendation = '';
      if (user.profile && user.profile.recommendedWeights) {
        const recommendedWeight = user.profile.recommendedWeights[text];
        if (recommendedWeight && recommendedWeight > 0) {
          recommendation = `\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å: ${recommendedWeight.toFixed(1)} –∫–≥\n` +
                          `(—ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –¥–ª—è —Ç–µ–±—è –≤–µ—Å)`;
        } else if (recommendedWeight === 0) {
          recommendation = `\nüí° –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –≤–µ—Å–æ–º —Ç–µ–ª–∞\n`;
        } else if (!recommendedWeight) {
          recommendation = `\nüí° –î–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ –±–∞–∑–µ\n`;
        }
      }
      
      bot.sendMessage(chatId,
        `üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –≤–µ—Å –¥–ª—è "${text}":${recommendation}\n` +
        '–ü—Ä–∏–º–µ—Ä: "32.5" (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏)',
        {
          reply_markup: {
            keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
            resize_keyboard: true
          }
        }
      );
    }
    else if (currentExercise.step === 'weight') {
      const weight = parseFloat(text.replace(',', '.')); // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫
      
      if (isNaN(weight) || weight < 0) {
        return bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞! –ù–∞–ø—Ä–∏–º–µ—Ä: 25.5 –∏–ª–∏ 30');
      }
      
      currentExercise.weight = weight;
      currentExercise.step = 'sets';
      
      bot.sendMessage(chatId,
        'üéØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è "' + currentExercise.name + '":\n\n' +
        '–ü—Ä–∏–º–µ—Ä: "4"',
        {
          reply_markup: {
            keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
            resize_keyboard: true
          }
        }
      );
    }
    else if (currentExercise.step === 'sets') {
      const sets = parseInt(text);
      if (isNaN(sets) || sets < 1) {
        return bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 –¥–ª—è –ø–æ–¥—Ö–æ–¥–æ–≤!');
      }
      
      currentExercise.sets = sets;
      
      user.newWorkout.exercises.push({
        name: currentExercise.name,
        weight: currentExercise.weight,
        sets: currentExercise.sets
      });
      
      let message = '‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n';
      message += 'üí™ ' + currentExercise.name + '\n';
      message += 'üìä –í–µ—Å: ' + currentExercise.weight + 'kg\n';
      message += 'üéØ –ü–æ–¥—Ö–æ–¥–æ–≤: ' + currentExercise.sets + '\n\n';
      message += '–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ' + user.newWorkout.exercises.length + '\n\n';
      message += '–¢–µ–∫—É—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n';
      user.newWorkout.exercises.forEach((ex, i) => {
        message += (i + 1) + '. ' + ex.name + ' - ' + ex.weight + 'kg (' + ex.sets + ' –ø–æ–¥—Ö–æ–¥–æ–≤)\n';
      });
      
      const keyboard = [['‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']];
      if (user.newWorkout.exercises.length > 0) {
        keyboard.push(['üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']);
      }
      keyboard.push(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ']);
      
      bot.sendMessage(chatId, message, {
        reply_markup: {
          keyboard: keyboard,
          resize_keyboard: true
        }
      });
      
      user.newWorkout.currentExercise = { step: 'name' };
    }
    return;
  }

  bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
bot.onText(/üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (!user.profile) {
    return bot.sendMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start');
  }
  
  let message = `üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n`;
  message += `üéØ –¶–µ–ª—å: ${user.profile.goal}\n`;
  message += `üöª –ü–æ–ª: ${user.profile.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}\n`;
  message += `üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${user.profile.age}\n`;
  message += `‚öñÔ∏è –í–µ—Å: ${user.profile.weight} –∫–≥\n`;
  message += `üèÜ –û–ø—ã—Ç: ${user.profile.experience === 'beginner' ? '–ù–æ–≤–∏—á–æ–∫' : user.profile.experience === 'intermediate' ? '–°—Ä–µ–¥–Ω–∏–π' : '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}\n\n`;
  
  message += `üí™ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–µ—Å–∞ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä):</b>\n`;
  Object.keys(user.profile.recommendedWeights || {}).forEach(exercise => {
    const weight = user.profile.recommendedWeights[exercise];
    if (weight > 0) {
      message += `‚Ä¢ ${exercise}: ${weight.toFixed(1)} –∫–≥\n`;
    }
  });
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
bot.onText(/‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  userData.get(userId).state = 'creating_name';
  userData.get(userId).newWorkout = { exercises: [] };
  
  bot.sendMessage(chatId, 
    'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n' +
    '–ü—Ä–∏–º–µ—Ä: "–°–∏–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–¥–∏"',
    {
      reply_markup: {
        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
        resize_keyboard: true
      }
    }
  );
});

// –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
bot.onText(/üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (!user.workouts.length) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!');
  }
  
  let message = 'üìã –í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n';
  user.workouts.forEach((workout, index) => {
    message += `${index + 1}. ${workout.name}\n`;
    workout.exercises.forEach((ex, exIndex) => {
      message += `   ${exIndex + 1}. ${ex.name} - ${ex.weight}kg (${ex.sets} –ø–æ–¥—Ö–æ–¥–æ–≤)\n`;
    });
    message += '\n';
  });
  
  bot.sendMessage(chatId, message);
});

// –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
bot.onText(/üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (!user.workouts.length) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!');
  }
  
  const buttons = user.workouts.map((workout, index) => [
    { text: workout.name, callback_data: 'select_workout_' + index }
  ]);
  
  bot.sendMessage(chatId, 'üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', {
    reply_markup: {
      inline_keyboard: buttons
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user.state === 'creating_exercises') {
    user.newWorkout.currentExercise = { step: 'name' };
    
    bot.sendMessage(chatId,
      'üí™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞"',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
  }
});

bot.onText(/üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user.state === 'creating_exercises' && user.newWorkout.exercises.length > 0) {
    const removedExercise = user.newWorkout.exercises.pop();
    
    let message = `üóë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "${removedExercise.name}" —É–¥–∞–ª–µ–Ω–æ!\n\n`;
    message += `–û—Å—Ç–∞–ª–æ—Å—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${user.newWorkout.exercises.length}`;
    
    if (user.newWorkout.exercises.length > 0) {
      message += '\n\n–¢–µ–∫—É—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n';
      user.newWorkout.exercises.forEach((ex, i) => {
        message += `${i + 1}. ${ex.name} - ${ex.weight}kg (${ex.sets} –ø–æ–¥—Ö–æ–¥–æ–≤)\n`;
      });
    }
    
    const keyboard = [['‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']];
    if (user.newWorkout.exercises.length > 0) {
      keyboard.push(['üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']);
    }
    keyboard.push(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ']);
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true
      }
    });
  }
});

bot.onText(/‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user.state === 'creating_exercises') {
    if (user.newWorkout.exercises.length === 0) {
      return bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!');
    }
    
    user.workouts.push(user.newWorkout);
    user.state = 'menu';
    delete user.newWorkout;
    
    bot.sendMessage(chatId,
      'üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.',
      {
        reply_markup: {
          keyboard: [
            ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
            ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
            ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
            ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
            ['‚è± –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
          ],
          resize_keyboard: true
        }
      }
    );
  }
});

console.log('üéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('üì± –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram');
