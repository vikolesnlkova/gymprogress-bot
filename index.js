require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º GymProgress –Ω–∞ Railway...');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  process.exit(1);
}

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
  polling: true
});

console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling –Ω–∞ Railway');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const userData = new Map();
const activeTimers = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const userName = msg.from.first_name || '–¥—Ä—É–≥';
  
  console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (${userId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
  
  if (!userData.has(userId)) {
    userData.set(userId, {
      workouts: [],
      state: 'questionnaire_gender',
      profile: {}
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É
    startQuestionnaire(chatId, userId, userName);
    return;
  }
  
  userData.get(userId).state = 'menu';
  showMainMenu(chatId, userName);
});

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function startQuestionnaire(chatId, userId, userName) {
  bot.sendMessage(chatId,
    `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n\n` +
    '–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
    {
      reply_markup: {
        keyboard: [
          ['üë® –ú—É–∂—Å–∫–æ–π'],
          ['üë© –ñ–µ–Ω—Å–∫–∏–π']
        ],
        resize_keyboard: true
      }
    }
  );
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId, userName, customMessage = null) {
  const message = customMessage || `üí™ –ü—Ä–∏–≤–µ—Ç, ${userName}! GymProgress –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`;
  
  const options = {
    reply_markup: {
      keyboard: [
        ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, options);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
bot.onText(/üë® –ú—É–∂—Å–∫–æ–π/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user && user.state === 'questionnaire_gender') {
    user.profile.gender = 'male';
    user.state = 'questionnaire_weight';
    
    bot.sendMessage(chatId,
      'üìä –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):\n' +
      '–ü—Ä–∏–º–µ—Ä: 75.5',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
  }
});

bot.onText(/üë© –ñ–µ–Ω—Å–∫–∏–π/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user && user.state === 'questionnaire_gender') {
    user.profile.gender = 'female';
    user.state = 'questionnaire_weight';
    
    bot.sendMessage(chatId,
      'üìä –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):\n' +
      '–ü—Ä–∏–º–µ—Ä: 65.5',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
  }
});

// –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
// [–í–°–¢–ê–í–¨–¢–ï –í–ê–®–ò –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò]

// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è Railway)
const http = require('http');
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({ 
    status: 'Bot is running on Railway!', 
    timestamp: new Date().toISOString()
  }));
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

console.log('üéâ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Railway!');
