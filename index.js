require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º GymProgress...');

const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true});
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
const userData = new Map();
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
const activeTimers = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!userData.has(userId)) {
    userData.set(userId, {
      workouts: [],
      state: 'questionnaire',
      profile: {}
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É
    startQuestionnaire(chatId, userId);
    return;
  }
  
  userData.get(userId).state = 'menu';
  showMainMenu(chatId, msg.from.first_name);
});

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function startQuestionnaire(chatId, userId) {
  const user = userData.get(userId);
  user.state = 'questionnaire_weight';
  
  bot.sendMessage(chatId,
    'üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!\n\n' +
    '–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):\n' +
    '–ü—Ä–∏–º–µ—Ä: 75.5',
    {
      reply_markup: {
        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
        resize_keyboard: true
      }
    }
  );
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –≤–µ—Å–æ–≤
function calculateRecommendedWeights(user) {
  const weight = user.profile.weight;
  const experience = user.profile.experience;
  const goal = user.profile.goal;
  
  let baseMultiplier, assistanceMultiplier;
  
  // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –ø–æ –æ–ø—ã—Ç—É
  switch(experience) {
    case 'beginner':
      baseMultiplier = 0.4;
      assistanceMultiplier = 0.3;
      break;
    case 'intermediate':
      baseMultiplier = 0.6;
      assistanceMultiplier = 0.45;
      break;
    case 'advanced':
      baseMultiplier = 0.8;
      assistanceMultiplier = 0.6;
      break;
    default:
      baseMultiplier = 0.5;
      assistanceMultiplier = 0.35;
  }
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
  switch(goal) {
    case 'weight_loss':
      baseMultiplier *= 0.9;
      assistanceMultiplier *= 0.85;
      break;
    case 'strength':
      baseMultiplier *= 1.1;
      assistanceMultiplier *= 1.0;
      break;
    case 'muscle_gain':
      baseMultiplier *= 1.0;
      assistanceMultiplier *= 0.95;
      break;
    case 'endurance':
      baseMultiplier *= 0.8;
      assistanceMultiplier *= 0.7;
      break;
  }
  
  user.profile.recommendedWeights = {
    base: Math.round(weight * baseMultiplier * 10) / 10,
    assistance: Math.round(weight * assistanceMultiplier * 10) / 10
  };
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–µ—Å–∞ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
function recommendWeightForExercise(user, exerciseName) {
  const recommended = user.profile.recommendedWeights;
  if (!recommended) return null;
  
  const exercise = exerciseName.toLowerCase();
  
  // –ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  if (exercise.includes('–∂–∏–º') || exercise.includes('–ø—Ä–∏—Å–µ–¥') || 
      exercise.includes('—Ç—è–≥–∞') || exercise.includes('—Å—Ç–∞–Ω–æ–≤–∞—è')) {
    return recommended.base;
  }
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  return recommended.assistance;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getGoalText(goal) {
  const goals = {
    'muscle_gain': 'üí™ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
    'weight_loss': 'üèÉ –ü–æ—Ö—É–¥–µ–Ω–∏–µ',
    'strength': 'üèãÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã', 
    'endurance': 'üèÉ‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å',
    'maintenance': 'üßò –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'
  };
  return goals[goal] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
}

function getExperienceText(experience) {
  const experiences = {
    'beginner': 'üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π',
    'intermediate': 'üìà –°—Ä–µ–¥–Ω–∏–π',
    'advanced': 'üíé –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
  };
  return experiences[experience] || '–ù–µ —É–∫–∞–∑–∞–Ω';
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
function parseTimeInput(input) {
  if (!input) return null;
  
  // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º —Å–µ–∫—É–Ω–¥–∞–º–∏
  if (/^\d+$/.test(input)) {
    return parseInt(input);
  }
  
  // –§–æ—Ä–º–∞—Ç: 30s, 2m, 1m30s
  let totalSeconds = 0;
  const minutesMatch = input.match(/(\d+)m/);
  const secondsMatch = input.match(/(\d+)s/);
  
  if (minutesMatch) {
    totalSeconds += parseInt(minutesMatch[1]) * 60;
  }
  
  if (secondsMatch) {
    totalSeconds += parseInt(secondsMatch[1]);
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –º–∏–Ω—É—Ç –Ω–∏ —Å–µ–∫—É–Ω–¥, –Ω–æ –µ—Å—Ç—å –±—É–∫–≤—ã - –æ—à–∏–±–∫–∞
  if (!minutesMatch && !secondsMatch && /[a-zA-Z]/.test(input)) {
    return null;
  }
  
  return totalSeconds || null;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function formatTime(seconds) {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  
  if (mins > 0) {
    return `${mins}–º ${secs}—Å`;
  }
  return `${secs} —Å–µ–∫—É–Ω–¥`;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function startTimer(chatId, userId, exerciseName, duration) {
  const timerId = `${userId}_${Date.now()}`;
  
  bot.sendMessage(chatId,
    `‚è±Ô∏è –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n` +
    `üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${exerciseName}\n` +
    `‚è∞ –í—Ä–µ–º—è: ${formatTime(duration)}\n\n` +
    `–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ ${formatTime(duration)}`
  );
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
  const timeoutId = setTimeout(() => {
    bot.sendMessage(chatId,
      `üîî –¢–∞–π–º–µ—Ä!\n\n` +
      `üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ${exerciseName}\n` +
      `‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! ${formatTime(duration)} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n` +
      `üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!`
    );
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    activeTimers.delete(timerId);
  }, duration * 1000);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ
  activeTimers.set(timerId, {
    userId: userId,
    chatId: chatId,
    exerciseName: exerciseName,
    duration: duration,
    startTime: Date.now(),
    timeoutId: timeoutId
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —á–µ—Ä–µ–∑ –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏
  if (duration > 30) {
    setTimeout(() => {
      const remaining = Math.ceil(duration / 2);
      bot.sendMessage(chatId,
        `‚è∞ –ü–æ–ª–æ–≤–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–∞!\n` +
        `–û—Å—Ç–∞–ª–æ—Å—å: ${formatTime(remaining)}\n` +
        `üí™ ${exerciseName} - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`
      );
    }, (duration / 2) * 1000);
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId, firstName, customMessage = null) {
  const message = customMessage || `üí™ –ü—Ä–∏–≤–µ—Ç, ${firstName}! GymProgress –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`;
  
  const options = {
    reply_markup: {
      keyboard: [
        ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
      ],
      resize_keyboard: true
    }
  };
  
  bot.sendMessage(chatId, message, options);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text.trim();
  
  if (text.startsWith('/')) return;
  if ([
    'üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 
    '‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', 
    'üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
    '‚ùå –û—Ç–º–µ–Ω–∞',
    '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
    'üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ',
    '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ',
    '‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π'
  ].includes(text)) return;
  
  const user = userData.get(userId);
  if (!user) return;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã
  if (user.state === 'questionnaire_weight') {
    const weight = parseFloat(text);
    if (isNaN(weight) || weight < 30 || weight > 300) {
      return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):');
    }
    
    user.profile.weight = weight;
    user.state = 'questionnaire_goal';
    
    bot.sendMessage(chatId,
      'üéØ –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å?\n\n' +
      '1. üí™ –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã\n' +
      '2. üèÉ –ü–æ—Ö—É–¥–µ–Ω–∏–µ\n' +
      '3. üèãÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã\n' +
      '4. üèÉ‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å\n' +
      '5. üßò –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã',
      {
        reply_markup: {
          keyboard: [
            ['üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã'],
            ['üèÉ –ü–æ—Ö—É–¥–µ–Ω–∏–µ'],
            ['üèãÔ∏è –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã'],
            ['üèÉ‚Äç‚ôÇÔ∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'],
            ['üßò –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'],
            ['‚ùå –û—Ç–º–µ–Ω–∞']
          ],
          resize_keyboard: true
        }
      }
    );
    return;
  }
  
  if (user.state === 'questionnaire_goal') {
    const goals = {
      'üí™ –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã': 'muscle_gain',
      'üèÉ –ø–æ—Ö—É–¥–µ–Ω–∏–µ': 'weight_loss', 
      'üèãÔ∏è —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã': 'strength',
      'üèÉ‚Äç‚ôÇÔ∏è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å': 'endurance',
      'üßò –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã': 'maintenance'
    };
    
    const goalKey = text.toLowerCase();
    const goal = Object.keys(goals).find(g => goalKey.includes(g.split(' ')[1]));
    
    if (goal) {
      user.profile.goal = goals[goal];
      user.state = 'questionnaire_experience';
      
      bot.sendMessage(chatId,
        'üìä –ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?\n\n' +
        '1. üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π (–¥–æ 6 –º–µ—Å—è—Ü–µ–≤)\n' +
        '2. üìà –°—Ä–µ–¥–Ω–∏–π (6 –º–µ—Å—è—Ü–µ–≤ - 2 –≥–æ–¥–∞)\n' +
        '3. üíé –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–±–æ–ª–µ–µ 2 –ª–µ—Ç)',
        {
          reply_markup: {
            keyboard: [
              ['üöÄ –ù–∞—á–∏–Ω–∞—é—â–∏–π'],
              ['üìà –°—Ä–µ–¥–Ω–∏–π'],
              ['üíé –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'],
              ['‚ùå –û—Ç–º–µ–Ω–∞']
            ],
            resize_keyboard: true
          }
        }
      );
    }
    return;
  }
  
  if (user.state === 'questionnaire_experience') {
    const experiences = {
      'üöÄ –Ω–∞—á–∏–Ω–∞—é—â–∏–π': 'beginner',
      'üìà —Å—Ä–µ–¥–Ω–∏–π': 'intermediate',
      'üíé –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 'advanced'
    };
    
    const expKey = text.toLowerCase();
    const experience = Object.keys(experiences).find(exp => expKey.includes(exp.split(' ')[1]));
    
    if (experience) {
      user.profile.experience = experiences[experience];
      user.state = 'menu';
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–µ—Å–∞
      calculateRecommendedWeights(user);
      
      let message = 'üéâ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n';
      message += `üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n`;
      message += `‚Ä¢ –í–µ—Å: ${user.profile.weight} –∫–≥\n`;
      message += `‚Ä¢ –¶–µ–ª—å: ${getGoalText(user.profile.goal)}\n`;
      message += `‚Ä¢ –û–ø—ã—Ç: ${getExperienceText(user.profile.experience)}\n\n`;
      message += `üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–µ—Å–∞:\n`;
      message += `‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: ${user.profile.recommendedWeights?.base || 'N/A'} –∫–≥\n`;
      message += `‚Ä¢ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: ${user.profile.recommendedWeights?.assistance || 'N/A'} –∫–≥\n`;
      
      showMainMenu(chatId, msg.from.first_name, message);
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  if (user.state === 'setting_timer') {
    const timeInSeconds = parseTimeInput(text);
    
    if (timeInSeconds === null || timeInSeconds < 5 || timeInSeconds > 3600) {
      return bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 1 —á–∞—Å–∞):');
    }
    
    user.state = 'timer_naming';
    user.timerData = { duration: timeInSeconds };
    
    bot.sendMessage(chatId,
      `‚è±Ô∏è –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${formatTime(timeInSeconds)}\n\n` +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞:\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ü–ª–∞–Ω–∫–∞" –∏–ª–∏ "–£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑—ã"',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
    return;
  }
  
  if (user.state === 'timer_naming') {
    const exerciseName = text;
    const timerData = user.timerData;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    startTimer(chatId, userId, exerciseName, timerData.duration);
    
    user.state = 'menu';
    delete user.timerData;
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
  if (user.state === 'creating_name') {
    user.newWorkout.name = text;
    user.state = 'creating_exercises';
    user.newWorkout.currentExercise = { step: 'name' };
    
    bot.sendMessage(chatId,
      'üí™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞"',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
    return;
  }
  
  if (user.state === 'creating_exercises') {
    const currentExercise = user.newWorkout.currentExercise;
    
    if (currentExercise.step === 'name') {
      currentExercise.name = text;
      currentExercise.step = 'weight';
      
      bot.sendMessage(chatId,
        'üìä –í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –≤–µ—Å –¥–ª—è "' + text + '":\n\n' +
        '–ü—Ä–∏–º–µ—Ä: "60" (–≤ –∫–≥)',
        {
          reply_markup: {
            keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
            resize_keyboard: true
          }
        }
      );
    }
    else if (currentExercise.step === 'weight') {
      const weight = parseFloat(text);
      if (isNaN(weight)) {
        return bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞!');
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–µ—Å–∞
      const recommendedWeight = recommendWeightForExercise(user, currentExercise.name);
      let message = `üìä –í–µ—Å "${weight}kg" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è "${currentExercise.name}"`;
      
      if (recommendedWeight && Math.abs(weight - recommendedWeight) > 10) {
        const diff = weight - recommendedWeight;
        if (diff > 0) {
          message += `\n\nüí° –°–æ–≤–µ—Ç: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å –¥–ª—è –≤–∞—Å: ${recommendedWeight}kg\n`;
          message += `–°–µ–π—á–∞—Å –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤–µ—Å –Ω–∞ ${diff.toFixed(1)}kg –±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ.`;
        } else {
          message += `\n\nüí° –°–æ–≤–µ—Ç: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å –¥–ª—è –≤–∞—Å: ${recommendedWeight}kg\n`;
          message += `–í—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å –Ω–∞ ${Math.abs(diff).toFixed(1)}kg –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.`;
        }
      }
      
      currentExercise.weight = weight;
      currentExercise.step = 'sets';
      
      bot.sendMessage(chatId, message + 
        '\n\nüéØ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:',
        {
          reply_markup: {
            keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
            resize_keyboard: true
          }
        }
      );
    }
    else if (currentExercise.step === 'sets') {
      const sets = parseInt(text);
      if (isNaN(sets) || sets < 1) {
        return bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 –¥–ª—è –ø–æ–¥—Ö–æ–¥–æ–≤!');
      }
      
      currentExercise.sets = sets;
      
      user.newWorkout.exercises.push({
        name: currentExercise.name,
        weight: currentExercise.weight,
        sets: currentExercise.sets
      });
      
      let message = '‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n';
      message += 'üí™ ' + currentExercise.name + '\n';
      message += 'üìä –í–µ—Å: ' + currentExercise.weight + 'kg\n';
      message += 'üéØ –ü–æ–¥—Ö–æ–¥–æ–≤: ' + currentExercise.sets + '\n\n';
      message += '–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ' + user.newWorkout.exercises.length + '\n\n';
      message += '–¢–µ–∫—É—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n';
      user.newWorkout.exercises.forEach((ex, i) => {
        message += (i + 1) + '. ' + ex.name + ' - ' + ex.weight + 'kg (' + ex.sets + ' –ø–æ–¥—Ö–æ–¥–æ–≤)\n';
      });
      
      const keyboard = [['‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']];
      if (user.newWorkout.exercises.length > 0) {
        keyboard.push(['üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']);
      }
      keyboard.push(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ']);
      
      bot.sendMessage(chatId, message, {
        reply_markup: {
          keyboard: keyboard,
          resize_keyboard: true
        }
      });
      
      user.newWorkout.currentExercise = { step: 'name' };
    }
    return;
  }
  
  bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
bot.onText(/‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  userData.get(userId).state = 'creating_name';
  userData.get(userId).newWorkout = { exercises: [] };
  
  bot.sendMessage(chatId, 
    'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n' +
    '–ü—Ä–∏–º–µ—Ä: "–°–∏–ª–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" –∏–ª–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥—Ä—É–¥–∏"',
    {
      reply_markup: {
        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
        resize_keyboard: true
      }
    }
  );
});

bot.onText(/üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (!user.workouts.length) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!');
  }
  
  let message = 'üìã –í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n';
  user.workouts.forEach((workout, index) => {
    message += `${index + 1}. ${workout.name}\n`;
    workout.exercises.forEach((ex, exIndex) => {
      message += `   ${exIndex + 1}. ${ex.name} - ${ex.weight}kg (${ex.sets} –ø–æ–¥—Ö–æ–¥–æ–≤)\n`;
    });
    message += '\n';
  });
  
  bot.sendMessage(chatId, message);
});

bot.onText(/üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (!user.workouts.length) {
    return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!');
  }
  
  const buttons = user.workouts.map((workout, index) => [
    { text: workout.name, callback_data: 'select_workout_' + index }
  ]);
  
  bot.sendMessage(chatId, 'üèãÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', {
    reply_markup: {
      inline_keyboard: buttons
    }
  });
});

bot.onText(/‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  userData.get(userId).state = 'setting_timer';
  
  bot.sendMessage(chatId,
    '‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–∞–π–º–µ—Ä –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n\n' +
    '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n' +
    '‚Ä¢ 30s - 30 —Å–µ–∫—É–Ω–¥\n' +
    '‚Ä¢ 2m - 2 –º–∏–Ω—É—Ç—ã\n' +
    '‚Ä¢ 1m30s - 1 –º–∏–Ω—É—Ç–∞ 30 —Å–µ–∫—É–Ω–¥\n' +
    '‚Ä¢ 90 - 90 —Å–µ–∫—É–Ω–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n' +
    '–ü—Ä–∏–º–µ—Ä: 45s –∏–ª–∏ 2m15s',
    {
      reply_markup: {
        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
        resize_keyboard: true
      }
    }
  );
});

bot.onText(/‚ùå –û—Ç–º–µ–Ω–∞/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  // –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let cancelledTimers = 0;
  for (const [timerId, timer] of activeTimers) {
    if (timer.userId === userId) {
      clearTimeout(timer.timeoutId);
      activeTimers.delete(timerId);
      cancelledTimers++;
    }
  }
  
  if (cancelledTimers > 0) {
    bot.sendMessage(chatId, `‚èπÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: ${cancelledTimers}`);
  }
  
  user.state = 'menu';
  delete user.timerData;
  delete user.newWorkout;
  
  showMainMenu(chatId, msg.from.first_name, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
});

bot.onText(/‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user.state === 'creating_exercises') {
    user.newWorkout.currentExercise = { step: 'name' };
    
    bot.sendMessage(chatId,
      'üí™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n' +
      '–ü—Ä–∏–º–µ—Ä: "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞"',
      {
        reply_markup: {
          keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
          resize_keyboard: true
        }
      }
    );
  }
});

bot.onText(/üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user.state === 'creating_exercises' && user.newWorkout.exercises.length > 0) {
    const removedExercise = user.newWorkout.exercises.pop();
    
    let message = `üóë –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "${removedExercise.name}" —É–¥–∞–ª–µ–Ω–æ!\n\n`;
    message += `–û—Å—Ç–∞–ª–æ—Å—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${user.newWorkout.exercises.length}`;
    
    if (user.newWorkout.exercises.length > 0) {
      message += '\n\n–¢–µ–∫—É—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n';
      user.newWorkout.exercises.forEach((ex, i) => {
        message += `${i + 1}. ${ex.name} - ${ex.weight}kg (${ex.sets} –ø–æ–¥—Ö–æ–¥–æ–≤)\n`;
      });
    }
    
    const keyboard = [['‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']];
    if (user.newWorkout.exercises.length > 0) {
      keyboard.push(['üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ']);
    }
    keyboard.push(['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ']);
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true
      }
    });
  }
});

bot.onText(/‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const user = userData.get(userId);
  
  if (user.state === 'creating_exercises') {
    if (user.newWorkout.exercises.length === 0) {
      return bot.sendMessage(chatId, '‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!');
    }
    
    user.workouts.push(user.newWorkout);
    user.state = 'menu';
    delete user.newWorkout;
    
    bot.sendMessage(chatId,
      'üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n' +
      '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.',
      {
        reply_markup: {
          keyboard: [
            ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
            ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
            ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
            ['‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
          ],
          resize_keyboard: true
        }
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
bot.on('callback_query', (callbackQuery) => {
  const msg = callbackQuery.message;
  const chatId = msg.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  const user = userData.get(userId);
  
  if (data.startsWith('select_workout_')) {
    const workoutIndex = parseInt(data.split('_')[2]);
    const workout = user.workouts[workoutIndex];
    
    user.state = 'workout_selected';
    user.currentWorkout = {
      workoutIndex: workoutIndex,
      currentExerciseIndex: 0,
      exercises: workout.exercises.map(ex => ({
        name: ex.name,
        weight: ex.weight,
        targetSets: ex.sets,
        completedSets: []
      }))
    };
    
    showExercise(chatId, userId);
  }
  else if (data.startsWith('set_done_')) {
    const exerciseIndex = user.currentWorkout.currentExerciseIndex;
    const currentExercise = user.currentWorkout.exercises[exerciseIndex];
    
    currentExercise.completedSets.push({
      number: currentExercise.completedSets.length + 1,
      weight: currentExercise.weight,
      reps: 8
    });
    
    showExercise(chatId, userId);
  }
  else if (data === 'next_exercise') {
    user.currentWorkout.currentExerciseIndex++;
    showExercise(chatId, userId);
  }
  else if (data === 'finish_workout') {
    finishWorkout(chatId, userId);
  }
  
  bot.answerCallbackQuery(callbackQuery.id);
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
function showExercise(chatId, userId) {
  const user = userData.get(userId);
  const workout = user.currentWorkout;
  const exerciseIndex = workout.currentExerciseIndex;
  const exercise = workout.exercises[exerciseIndex];
  
  let message = `üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ${exerciseIndex + 1}/${workout.exercises.length}\n\n`;
  message += `üí™ ${exercise.name}\n`;
  message += `üìä –†–∞–±–æ—á–∏–π –≤–µ—Å: ${exercise.weight}kg\n`;
  message += `üéØ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤: ${exercise.targetSets}\n\n`;
  message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–¥—Ö–æ–¥–æ–≤: ${exercise.completedSets.length}/${exercise.targetSets}\n\n`;
  
  if (exercise.completedSets.length > 0) {
    message += 'üìà –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã:\n';
    exercise.completedSets.forEach(set => {
      message += `   ${set.number}. ${set.weight}kg √ó ${set.reps} —Ä–∞–∑\n`;
    });
  }
  
  const isLastExercise = exerciseIndex === workout.exercises.length - 1;
  const allSetsCompleted = exercise.completedSets.length >= exercise.targetSets;
  
  const buttons = [];
  
  if (!allSetsCompleted) {
    buttons.push([{ text: '‚úÖ –ü–æ–¥—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', callback_data: 'set_done_' + exerciseIndex }]);
  }
  
  if (allSetsCompleted && !isLastExercise) {
    buttons.push([{ text: '‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ', callback_data: 'next_exercise' }]);
  }
  
  buttons.push([{ text: 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', callback_data: 'finish_workout' }]);
  
  if (!workout.currentMessageId) {
    bot.sendMessage(chatId, message, {
      reply_markup: { inline_keyboard: buttons }
    }).then(sentMsg => {
      workout.currentMessageId = sentMsg.message_id;
    });
  } else {
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: workout.currentMessageId,
      reply_markup: { inline_keyboard: buttons }
    });
  }
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
function finishWorkout(chatId, userId) {
  const user = userData.get(userId);
  const workout = user.currentWorkout;
  
  let totalSets = 0;
  let completedSets = 0;
  
  workout.exercises.forEach(ex => {
    totalSets += ex.targetSets;
    completedSets += ex.completedSets.length;
  });
  
  let message = 'üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n';
  message += 'üìä –ò—Ç–æ–≥–∏:\n';
  message += `‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: ${workout.exercises.length}\n`;
  message += `‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥—Ö–æ–¥–æ–≤: ${totalSets}\n`;
  message += `‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–¥—Ö–æ–¥–æ–≤: ${completedSets}\n\n`;
  
  if (completedSets >= totalSets) {
    message += 'üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!';
  } else {
    message += 'üí™ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–¥–µ–ª–∞–µ—Ç–µ –±–æ–ª—å—à–µ!';
  }
  
  user.state = 'menu';
  delete user.currentWorkout;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      keyboard: [
        ['üèãÔ∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'],
        ['üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
        ['‚è±Ô∏è –¢–∞–π–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π']
      ],
      resize_keyboard: true
    }
  });
}

console.log('üéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
console.log('üì± –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram');
